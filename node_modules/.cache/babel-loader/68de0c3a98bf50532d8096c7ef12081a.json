{"ast":null,"code":"export function getDaysTillEndOfMonth(type, includesVacations) {\n  let dateToday = new Date();\n  let endDate = new Date(dateToday.getFullYear(), date.getMonth() + 1, 0);\n  let total = 0;\n  while (dateToday <= endDate) {\n    if (dateToday.getDate() !== 0 && dateToday.getDate() !== 6) {\n      if (type === \"week\") {\n        total += includesVacations ? 1 : checkForVacation(dateToday);\n      }\n    } else if (type === \"we\") {\n      total += includesVacations ? 1 : checkForVacation(dateToday);\n    }\n    dateToday.setDate(dateToday.getDate() + 1);\n  }\n  return total;\n}\n\n// Les journées sont exclusives (ex. pour les vacances du 16 décembre, la journée du 16 est comptée comme ouvrée)\nconst vacations = [\n// Automne\n[1665871200000, 1667689200000],\n// Noel\n[1671231600000, 1672614000000],\n// Hiver\n[1676070000000, 1676761200000],\n// Printemps\n[1680904800000, 1682200800000],\n// Grandes vacances\n[1684533600000, 1694988000000]];\nfunction checkForVacation(date) {\n  let dateTimeStamp = date.getTime();\n  return vacations.every(arr => dateTimeStamp < arr[0] && dateTimeStamp > arr[1]);\n}","map":{"version":3,"names":["getDaysTillEndOfMonth","type","includesVacations","dateToday","Date","endDate","getFullYear","date","getMonth","total","getDate","checkForVacation","setDate","vacations","dateTimeStamp","getTime","every","arr"],"sources":["D:/dev/Rest_Calc/src/utils/calendar.js"],"sourcesContent":["export function getDaysTillEndOfMonth(type, includesVacations) {\r\n    let dateToday = new Date()\r\n    let endDate = new Date(dateToday.getFullYear(), date.getMonth() + 1, 0)\r\n    let total = 0\r\n    while (dateToday <= endDate) {\r\n        if (dateToday.getDate() !== 0 && dateToday.getDate() !== 6) {\r\n            if (type === \"week\") {\r\n                total += (includesVacations ? 1 : checkForVacation(dateToday))\r\n            }\r\n        } else if (type === \"we\") {\r\n            total += (includesVacations ? 1 : checkForVacation(dateToday))\r\n        }\r\n        dateToday.setDate(dateToday.getDate() + 1)\r\n    }\r\n    return total\r\n}\r\n\r\n// Les journées sont exclusives (ex. pour les vacances du 16 décembre, la journée du 16 est comptée comme ouvrée)\r\nconst vacations = [\r\n    // Automne\r\n    [1665871200000, 1667689200000],\r\n    // Noel\r\n    [1671231600000, 1672614000000],\r\n    // Hiver\r\n    [1676070000000, 1676761200000],\r\n    // Printemps\r\n    [1680904800000, 1682200800000],\r\n    // Grandes vacances\r\n    [1684533600000, 1694988000000]\r\n]\r\n\r\nfunction checkForVacation(date) {\r\n    let dateTimeStamp = date.getTime()\r\n    return vacations.every(arr => dateTimeStamp < arr[0] && dateTimeStamp > arr[1])\r\n}"],"mappings":"AAAA,OAAO,SAASA,qBAAqB,CAACC,IAAI,EAAEC,iBAAiB,EAAE;EAC3D,IAAIC,SAAS,GAAG,IAAIC,IAAI,EAAE;EAC1B,IAAIC,OAAO,GAAG,IAAID,IAAI,CAACD,SAAS,CAACG,WAAW,EAAE,EAAEC,IAAI,CAACC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;EACvE,IAAIC,KAAK,GAAG,CAAC;EACb,OAAON,SAAS,IAAIE,OAAO,EAAE;IACzB,IAAIF,SAAS,CAACO,OAAO,EAAE,KAAK,CAAC,IAAIP,SAAS,CAACO,OAAO,EAAE,KAAK,CAAC,EAAE;MACxD,IAAIT,IAAI,KAAK,MAAM,EAAE;QACjBQ,KAAK,IAAKP,iBAAiB,GAAG,CAAC,GAAGS,gBAAgB,CAACR,SAAS,CAAE;MAClE;IACJ,CAAC,MAAM,IAAIF,IAAI,KAAK,IAAI,EAAE;MACtBQ,KAAK,IAAKP,iBAAiB,GAAG,CAAC,GAAGS,gBAAgB,CAACR,SAAS,CAAE;IAClE;IACAA,SAAS,CAACS,OAAO,CAACT,SAAS,CAACO,OAAO,EAAE,GAAG,CAAC,CAAC;EAC9C;EACA,OAAOD,KAAK;AAChB;;AAEA;AACA,MAAMI,SAAS,GAAG;AACd;AACA,CAAC,aAAa,EAAE,aAAa,CAAC;AAC9B;AACA,CAAC,aAAa,EAAE,aAAa,CAAC;AAC9B;AACA,CAAC,aAAa,EAAE,aAAa,CAAC;AAC9B;AACA,CAAC,aAAa,EAAE,aAAa,CAAC;AAC9B;AACA,CAAC,aAAa,EAAE,aAAa,CAAC,CACjC;AAED,SAASF,gBAAgB,CAACJ,IAAI,EAAE;EAC5B,IAAIO,aAAa,GAAGP,IAAI,CAACQ,OAAO,EAAE;EAClC,OAAOF,SAAS,CAACG,KAAK,CAACC,GAAG,IAAIH,aAAa,GAAGG,GAAG,CAAC,CAAC,CAAC,IAAIH,aAAa,GAAGG,GAAG,CAAC,CAAC,CAAC,CAAC;AACnF"},"metadata":{},"sourceType":"module"}