{"ast":null,"code":"import _slicedToArray from\"D:/dev/Rest_Calc/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";export default function useLocalStorage(key,initialValue){// State to store our value\n// Pass initial state function to useState so logic is only executed once\nvar _useState=useState(function(){if(typeof window===\"undefined\"){return initialValue;}try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.log(error);return initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nif(typeof window!==\"undefined\"){window.localStorage.setItem(key,JSON.stringify(valueToStore));}}catch(error){// A more advanced implementation would handle the error case\nconsole.log(error);}};return[storedValue,setValue];}","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","window","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/dev/Rest_Calc/src/utils/localStorage.js"],"sourcesContent":["import { useState } from \"react\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      if (typeof window === \"undefined\") {\r\n        return initialValue;\r\n      }\r\n  \r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n  \r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = (value) => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        if (typeof window !== \"undefined\") {\r\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    return [storedValue, setValue];\r\n  }"],"mappings":"sGAAA,OAASA,QAAQ,KAAQ,OAAO,CAEhC,cAAe,SAASC,gBAAe,CAACC,GAAG,CAAEC,YAAY,CAAE,CACvD;AACA;AACA,cAAsCH,QAAQ,CAAC,UAAM,CACnD,GAAI,MAAOI,OAAM,GAAK,WAAW,CAAE,CACjC,MAAOD,aAAY,CACrB,CAEA,GAAI,CACF;AACA,GAAME,KAAI,CAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,CAC7C;AACA,MAAOG,KAAI,CAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAGF,YAAY,CAC/C,CAAE,MAAOO,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAClB,MAAOP,aAAY,CACrB,CACF,CAAC,CAAC,wCAfKU,WAAW,eAAEC,cAAc,eAiBlC;AACA;AACA,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,KAAK,CAAK,CAC1B,GAAI,CACF;AACA,GAAMC,aAAY,CAChBD,KAAK,WAAYE,SAAQ,CAAGF,KAAK,CAACH,WAAW,CAAC,CAAGG,KAAK,CACxD;AACAF,cAAc,CAACG,YAAY,CAAC,CAC5B;AACA,GAAI,MAAOb,OAAM,GAAK,WAAW,CAAE,CACjCA,MAAM,CAACE,YAAY,CAACa,OAAO,CAACjB,GAAG,CAAEM,IAAI,CAACY,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CACF,CAAE,MAAOP,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CACpB,CACF,CAAC,CAED,MAAO,CAACG,WAAW,CAAEE,QAAQ,CAAC,CAChC"},"metadata":{},"sourceType":"module"}